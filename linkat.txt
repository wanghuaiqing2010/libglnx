4.15  函数link、linkat、unlink、unlinkat和remove
如上节所述，任何一个文件可以有多个目录项指向其i节点。
创建一个指向现有文件的链接的方法是使用link函数或linkat函数。

#include <unistd.h>    
 
int link(const char *existingpath, const char *newpath);    
int linkat(int efd, const char *existingpath, int nfd, const char *newpath, int flag);     
 
两个函数的返回值：若成功，返回0；若出错，返回-1 

这两个函数创建一个新目录项newpath，它引用现有文件existingpath。如果newpath已经存在，则返回出错。
只创建newpath中的最后一个分量，路径中的其他部分应当已经存在。

对于linkat函数，现有文件是通过efd和existingpath参数指定的，新的路径名是通过nfd和newpath参数指定的。

默认情况下，如果两个路径名中的任一个是相对路径，那么它需要通过相对于对应的文件描述符进行计算。

如果两个文件描述符中的任一个设置为AT_FDCWD，那么相应的路径名（如果它是相对路径）就通过相对于当前目录进行计算。

如果任一路径名是绝对路径，相应的文件描述符参数就会被忽略。

当现有文件是符号链接时，由flag参数来控制linkat函数是创建指向现有符号链接的链接还是创建指向现有符号链接所指向的文件的链接。

如果在flag参数中设置了AT_SYMLINK_FOLLOW标志，就创建指向符号链接目标的链接。

如果这个标志被清除了，则创建一个指向符号链接本身的链接。

创建新目录项和增加链接计数应当是一个原子操作（请回忆在3.11节中对原子操作的讨论）。

虽然POSIX.1允许实现支持跨越文件系统的链接，但是大多数实现要求现有的和新建的两个路径名在同一个文件系统中。

如果实现支持创建指向一个目录的硬链接，那么也仅限于超级用户才可以这样做。

其理由是这样做可能在文件系统中形成循环，

大多数处理文件系统的实用程序都不能处理这种情况（4.17节将说明一个由符号链接引入循环的例子）。

因此，很多文件系统实现不允许对于目录的硬链接。

为了删除一个现有的目录项，可以调用unlink函数。

#include <unistd.h>     
 
int unlink(const char *pathname);     
int unlinkat(int fd, const char *pathname, int flag);     
 
两个函数的返回值：若成功，返回0；若出错，返回-1 


这两个函数删除目录项，并将由pathname所引用文件的链接计数减1。

如果对该文件还有其他链接，则仍可通过其他链接访问该文件的数据。

如果出错，则不对该文件做任何更改。

我们在前面已经提及，为了解除对文件的链接，必须对包含该目录项的目录具有写和执行权限。

正如4.10节所述，如果对该目录设置了粘着位，则对该目录必须具有写权限，并且具备下面三个条件之一：

拥有该文件；

拥有该目录；

具有超级用户权限。

只有当链接计数达到0时，该文件的内容才可被删除。另一个条件也会阻止删除文件的内容—只要有进程打开了该文件，其内容也不能删除。

关闭一个文件时，内核首先检查打开该文件的进程个数；如果这个计数达到0，内核再去检查其链接计数；

如果计数也是0，那么就删除该文件的内容。

如果pathname参数是相对路径名，那么unlinkat函数计算相对于由fd文件描述符参数代表的目录的路径名。

如果fd参数设置为AT_FDCWD，那么通过相对于调用进程的当前工作目录来计算路径名。

如果pathname参数是绝对路径名，那么fd参数被忽略。

flag参数给出了一种方法，使调用进程可以改变unlinkat函数的默认行为。

当AT_ REMOVEDIR标志被设置时，unlinkat函数可以类似于rmdir一样删除目录。

如果这个标志被清除，unlinkat与unlink执行同样的操作。

实例

图4-16的程序打开一个文件，然后解除它的链接。
执行该程序的进程然后睡眠15秒，接着就终止。

#include "apue.h"
#include <fcntl.h>

int main(void)
{
  if (open("tempfile", O_RDWR) < 0)
	err_sys("open error");
  if (unlink("tempfile") < 0)
	err_sys("unlink error");

  printf("done\n");
  exit(0);
}


$ ls -l tempfile                查看文件大小    
-rw-r----- 1 sar      413265408 Jan 21 07:14 tempfile    
$ df /home                          检查可用磁盘空间    
Filesystem  1K-blocks     Used  Available  Use%  Mounted  on    
/dev/hda4    11021440  1956332    9065108   18%  /home    
$ ./a.out &               
            在后台运行图4-16程序    
1364                                shell打印其进程ID    
$ file unlinked                 解除文件链接    
ls -l tempfile                  观察文件是否仍然存在    
ls: tempfile: No such file or directory           目录项已删除    
$ df /home                          检查可用磁盘空间有无变化    
Filesystem  1K-blocks     Used  Available  Use%  Mounted  on    
/dev/hda4    11021440  1956332    9065108   18%  /home    
$ done                              程序执行结束，关闭所有打开文件    
df /home                            现在，应当有更多可用磁盘空间    
Filesystem  1K-blocks     Used  Available  Use%  Mounted on    
/dev/hda4    11021440  1552352    9469088   15%  /home    
                                    现在，394.1 MB磁盘空间可用
									
unlink的这种特性经常被程序用来确保即使是在程序崩溃时，它所创建的临时文件也不会遗留下来。
进程用open或creat创建一个文件，然后立即调用unlink，因为该文件仍旧是打开的，所以不会将其内容删除。
只有当进程关闭该文件或终止时（在这种情况下，内核关闭该进程所打开的全部文件），该文件的内容才被删除。

如果pathname是符号链接，那么unlink删除该符号链接，而不是删除由该链接所引用的文件。
给出符号链接名的情况下，没有一个函数能删除由该链接所引用的文件。

如果文件系统支持的话，超级用户可以调用unlink，
其参数pathname指定一个目录，但是通常应当使用rmdir函数，
而不使用unlink这种方式。我们将在4.21节中说明rmdir函数。

我们也可以用remove函数解除对一个文件或目录的链接。
对于文件，remove的功能与unlink相同。
对于目录，remove的功能与rmdir相同。


 	
 
 
 
 
 
 
 	
 
 
 

